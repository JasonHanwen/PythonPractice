package NumberOfIslands;

/**
Author:Hanwen Wang
Version:1
Last Updated: 2015/11/3
*/

/*
class:Union Find
https://leetcode.com/problems/number-of-islands/
/*
Given a 2d grid map of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

11110
11010
11000
00000
Answer: 1

11000
11000
00100
00011
Answer: 3
*/
//this is to detect how many objects in this image
public class Solution {
	int rowLeng;
	int columnLeng;
    public int numIslands(char[][] grid) {
      if(grid == null || grid.length == 0)
           return
      rowLeng = grid.length;
      columnLeng = grid[0].length;

      int global = 0;
      for(int i = 0; i < rowLeng; i++){
        for(int j = 0; j < columnLeng; j++){
          //we set the value to -1 to distinguish with 1
          if(grid[i][j] == '1'){
              global ++;
              char tem = (char) global;
              if(global == 1){
            	  tem = 'x';
            	  merge(grid, i, j, tem);
              }
          }
          //this is to meet some part that not 1, 0, or other value
          else
              continue;
          return global;
        }
      }
      public void merge(char[][] grid, int i, int j, char tem){
        grid[i][i] = tem;
        if(i > 0 && grid[i - 1][j] == '1')
            merge(grid, i - 1,j,tem);
        if(i < columnLeng - 1 && grid[i + 1][j] == '1')
            merge(grid, i + 1,j);
        if(j > 0 && board[i][j - 1] == '1')
            merge(grid, i ,j - 1);
        if(j < rowLeng - 1 && grid[i][j + 1] == '1')
            merge(grid, i ,j + 1);
      }
    }
}

