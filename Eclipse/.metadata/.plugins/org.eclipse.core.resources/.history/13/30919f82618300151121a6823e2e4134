package SurroundedRegions;

/**
Author:Hanwen Wang
Version:1
Last Updated: 2015/11/3
*/

/*
class:Union Find
URL:https://leetcode.com/problems/surrounded-regions/
/*
Given a 2D board containing 'X' and 'O', capture all regions surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.

For example,

X X X X
X O O X
X X O X
X O X X

X X X X
X X X X
X X X X
X O X X
*/


public class Solution {
    int rowLeng;
    int columnLeng;
    public void solve(char[][] board) {
       //first get all value on the boubary of the matrix
       if(board == null || board.length == 0)
            return;
       rowLeng = board.length;
       columnLeng = board[0].length;
       //judge the corner case ie one row, or one colum, two row or two column
       if(columnLeng == 0)
    	   return;

       
       int columnNum = 0;
       
       int rowNum = 0;
       //this is to set the first row
       for(int i = 0; i < columnLeng; i++){
         if(board[rowNum][i] == 'O'){
        	mergeO(board, rowNum, i);
         }
       }
       //this is to set the last row
       rowNum = rowLeng - 1;
       for(int i = 0; i <  columnLeng; i++){
         if(board[rowNum][i] == 'O'){
            mergeO(board,rowNum, i);
         }
       }
      // this is to set the first column
      columnNum = 0;
      for(int i = 0; i < rowLeng; i++){
        if(board[i][columnNum] == 'O'){
           mergeO(i, columnNum);
        }
      }
      // this is to set the last column
      columnNum = columnLeng - 1;
      for(int i = 0; i < rowLeng; i++){
        if(board[i][columnNum] == 'O'){
           mergeO(i, columnNum);
        }
      }

      //then we set all values which equal to 'O' to 'X'
      for(int i = 0; i < rowLeng; i++){
        for(int j = 0; j < columnLeng; j++){
          if(board[i][j] == 'O')
              board[i][j] = 'X';
        }
      }
      for(int i = 0; i < rowLeng; i++){
        for(int j = 0; j < columnLeng; j++){
          if(board[i][j] == '+')
              board[i][j] == 'O';
        }
      }
    }

    public void mergeO(char[][]board,int i, int j){
        board[i][i] = '+';
        if(i > 0 && board[i - 1][j] == 'O')
            merge(board, i - 1,j);
        if(i < columnLeng - 1 && board[i + 1][j] == 'O')
            merge(board, i + 1,j);
        if(j > 0 && board[i][j - 1] == 'O')
            merge(board, i ,j - 1);
        if(j < rowLeng - 1 && board[i][j + 1] == 'O')
            merge(board, i ,j + 1);
    }

    public static void main(String[] args){
      //set the pixel value in on matrix, and then do the computation
    }
}
